{"version":3,"sources":["components/navlinksData.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["navLinks","title","links","url","text","id","Navbar","JS","CSS","ot","JSlinks","map","link","key","href","CSSlinks","other","className","this","props","home","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAgCeA,EAhCE,CAEb,CACAC,MAAO,cACPC,MAAO,CACH,CAACC,IAAK,+CAAgDC,KAAM,oBAAqBC,GAAI,MACrF,CAACF,IAAK,6CAA8CC,KAAM,iBAAkBC,GAAI,MAChF,CAACF,IAAK,sEAAuEC,KAAM,SAAUC,GAAI,MACjG,CAACF,IAAK,2EAA4EC,KAAM,cAAeC,GAAI,QAI/G,CACAJ,MAAO,eACPC,MAAO,CACH,CAACC,IAAK,8CAA+CC,KAAM,aAAcC,GAAI,MAC7E,CAACF,IAAK,6CAA8CC,KAAM,iBAAkBC,GAAI,MAChF,CAACF,IAAK,0CAA2CC,KAAM,aAAcC,GAAI,QAI7E,CACAJ,MAAO,iBACPC,MAAO,CACH,CAACC,IAAK,6CAA8CC,KAAM,YAAaC,GAAI,MAC3E,CAACF,IAAK,0EAA2EC,KAAM,mBAAoBC,GAAI,SCIxGC,E,uKAxBF,IAAD,cACiBN,EADjB,GACGO,EADH,KACOC,EADP,KACYC,EADZ,KAEEC,EAAUH,EAAGL,MAAMS,KAAI,SAAAC,GAAI,OAAE,wBAAIC,IAAKD,EAAKP,IAAI,uBAAGS,KAAMF,EAAKT,KAAMS,EAAKR,UACxEW,EAAWP,EAAIN,MAAMS,KAAI,SAAAC,GAAI,OAAE,wBAAIC,IAAKD,EAAKP,IAAI,uBAAGS,KAAMF,EAAKT,KAAMS,EAAKR,UAC1EY,EAAQP,EAAGP,MAAMS,KAAI,SAAAC,GAAI,OAAE,wBAAIC,IAAKD,EAAKP,IAAI,uBAAGS,KAAMF,EAAKT,KAAMS,EAAKR,UAC5E,OACI,yBAAKa,UAAW,iBACZ,wBAAIA,UAAW,UACX,4BAAI,uBAAGH,KAAMI,KAAKC,MAAMC,MAApB,SACJ,4BAAKb,EAAGN,MACJ,wBAAIgB,UAAU,YAAYP,IAE9B,4BAAKF,EAAIP,MACL,wBAAIgB,UAAU,YAAYF,IAE9B,4BAAKN,EAAGR,MACJ,wBAAIgB,UAAU,YAAYD,U,GAlB7BK,IAAMC,W,MCcZC,MAbf,WACE,OAEE,yBAAKN,UAAU,OAEb,kBAAC,EAAD,CAAQG,KAAK,kCAEb,8CCCcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a71e9ca6.chunk.js","sourcesContent":["const navLinks = [\r\n    \r\n    {\r\n    title: \"JS Projects\",\r\n    links: [\r\n        {url: \"https://aerinkayne.github.io/seasons_p5.html\", text: \"Seasons(spin off)\", id: \"00\"},  \r\n        {url: \"https://aerinkayne.github.io/invaders.html\", text: \"Space Invaders\", id: \"01\"}, \r\n        {url: \"https://aerinkayne.github.io/freeCodeCampProjects/tetris/index.html\", text: \"Tetris\", id: \"02\"},\r\n        {url: \"https://aerinkayne.github.io/freeCodeCampProjects/mineSweeper/index.html\", text: \"Minesweeper\", id: \"03\"}\r\n        ]\r\n    },\r\n    \r\n    {\r\n    title: \"CSS Projects\",\r\n    links: [\r\n        {url: \"https://aerinkayne.github.io/gridRadio.html\", text: \"Grid Radio\", id: \"10\"},  \r\n        {url: \"https://aerinkayne.github.io/negSpace.html\", text: \"Negative Space\", id: \"11\"}, \r\n        {url: \"https://aerinkayne.github.io/darklight/\", text: \"Abstract 1\", id: \"12\"}\r\n        ]\r\n    },\r\n    \r\n    {\r\n    title: \"Other Projects\",\r\n    links: [\r\n        {url: \"https://aerinkayne.github.io/fishtank.html\", text: \"Fish Tank\", id: \"20\"},  \r\n        {url: \"https://aerinkayne.github.io/freeCodeCampProjects/weatherApp/index.html\", text: \"Open Weather App\", id: \"21\"}\r\n        ]\r\n    }\r\n    \r\n\r\n]\r\n\r\nexport default navLinks;","import React from 'react';\r\nimport navLinks from './navlinksData';\r\n\r\nclass Navbar extends React.Component{\r\n\r\n    render(){\r\n        const [JS, CSS, ot]= navLinks;\r\n        const JSlinks = JS.links.map(link=><li key={link.id}><a href={link.url}>{link.text}</a></li>);\r\n        const CSSlinks = CSS.links.map(link=><li key={link.id}><a href={link.url}>{link.text}</a></li>);\r\n        const other = ot.links.map(link=><li key={link.id}><a href={link.url}>{link.text}</a></li>);\r\n        return (\r\n            <div className= \"darken5 _100W\">\r\n                <ul className= \"navbar\">\r\n                    <li><a href={this.props.home}>HOME</a></li>\r\n                    <li>{JS.title}\r\n                        <ul className=\"dropdown\">{JSlinks}</ul>\r\n                    </li>\r\n                    <li>{CSS.title}\r\n                        <ul className=\"dropdown\">{CSSlinks}</ul>\r\n                    </li>\r\n                    <li>{ot.title}\r\n                        <ul className=\"dropdown\">{other}</ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n      <Navbar home=\"https://aerinkayne.github.io/\"/>\n\n      <p>my react page</p>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}